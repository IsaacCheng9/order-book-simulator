services:
  postgres:
    build:
      context: .
      dockerfile: docker/Dockerfile.postgresql
    environment:
      - POSTGRES_DB=orderbook_db
      - POSTGRES_USER=orderbook_user
      - POSTGRES_PASSWORD=orderbook_password
    volumes:
      - postgres_data:/var/lib/postgresql/data
    ports:
      - "5432:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U orderbook_user -d orderbook_db"]
      interval: 5s
      timeout: 5s
      retries: 5
      start_period: 10s

  kafka:
    image: confluentinc/cp-kafka:latest
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_NODE_ID: 1
      KAFKA_PROCESS_ROLES: "broker,controller"
      KAFKA_CONTROLLER_QUORUM_VOTERS: "1@kafka:29093"
      KAFKA_LISTENERS: "PLAINTEXT://:9092,CONTROLLER://:29093"
      KAFKA_ADVERTISED_LISTENERS: "PLAINTEXT://kafka:9092"
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: "CONTROLLER:PLAINTEXT,PLAINTEXT:PLAINTEXT"
      KAFKA_CONTROLLER_LISTENER_NAMES: "CONTROLLER"
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      CLUSTER_ID: "order-book-dev-cluster-01"
      KAFKA_GROUP_MIN_SESSION_TIMEOUT_MS: 6000
      KAFKA_GROUP_MAX_SESSION_TIMEOUT_MS: 60000
      KAFKA_REPLICA_LAG_TIME_MAX_MS: 1000
      KAFKA_NUM_REPLICA_FETCHERS: 4
      KAFKA_COMPRESSION_TYPE: "producer"
      KAFKA_LINGER_MS: 0
      KAFKA_BATCH_SIZE: 8192
      KAFKA_GROUP_INITIAL_REBALANCE_DELAY_MS: 0
      KAFKA_AUTO_LEADER_REBALANCE_ENABLE: "true"
      KAFKA_UNCLEAN_LEADER_ELECTION_ENABLE: "false"
    healthcheck:
      test: nc -z localhost 9092 || exit 1
      interval: 5s
      timeout: 10s
      retries: 5
      start_period: 15s
    ports:
      - "9092:9092"
    volumes:
      - kafka_data:/var/lib/kafka/data

  gateway:
    build:
      context: .
      dockerfile: docker/Dockerfile.gateway
    depends_on:
      kafka:
        condition: service_healthy
      postgres:
        condition: service_healthy
    environment:
      - DATABASE_URL=postgresql+asyncpg://orderbook_user:orderbook_password@postgres:5432/orderbook_db
    ports:
      - "8000:8000"
    volumes:
      - ./resources:/app/resources

  matching:
    build:
      context: .
      dockerfile: docker/Dockerfile.matching
    depends_on:
      - kafka

  market-data:
    build:
      context: .
      dockerfile: docker/Dockerfile.market_data
    depends_on:
      - kafka
      - redis
      - postgres

  redis:
    image: redis:latest
    ports:
      - "6379:6379"
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 5s
      timeout: 3s
      retries: 5

volumes:
  kafka_data:
    driver: local
  postgres_data:
    driver: local
